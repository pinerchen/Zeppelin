{"paragraphs":[{"text":"%dep\r\nz.load(\"org.scalanlp:jblas:1.2.1\")","user":"anonymous","dateUpdated":"2018-12-21T01:47:05+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res0: org.apache.zeppelin.dep.Dependency = org.apache.zeppelin.dep.Dependency@56a87c15\n"}]},"apps":[],"jobName":"paragraph_1545277098610_105009903","id":"20181219-152535_1978786633","dateCreated":"2018-12-20T03:38:18+0000","dateStarted":"2018-12-20T03:38:34+0000","dateFinished":"2018-12-20T03:38:42+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3217"},{"text":"\r\n// 导入jblas库中的矩阵类\r\nimport org.jblas.DoubleMatrix\r\n// 定义相似度函数\r\ndef cosineSimilarity(vec1: DoubleMatrix, vec2: DoubleMatrix): Double = {\r\n    vec1.dot(vec2) / (vec1.norm2() * vec2.norm2())\r\n}\r\n\r\nimport java.io.File\r\nimport scala.io.Source\r\nimport org.apache.log4j.Logger\r\nimport org.apache.log4j.Level\r\n\r\nimport org.apache.spark.ml.fpm.FPGrowth\r\nimport org.apache.spark.ml.feature.StringIndexer\r\nimport org.apache.spark.ml.feature.VectorAssembler\r\nimport org.apache.spark.broadcast.Broadcast\r\nimport org.apache.spark.ml.evaluation.RegressionEvaluator\r\nimport org.apache.spark.mllib.evaluation.RankingMetrics\r\n\r\nimport org.apache.spark.sql.functions._\r\nimport org.apache.spark.sql.functions.explode\r\nimport org.apache.spark.sql.{DataFrame, Dataset,SparkSession}\r\n\r\nimport org.apache.spark.mllib.recommendation.Rating\r\nimport org.apache.spark.mllib.recommendation.ALS\r\nimport org.apache.spark.mllib.recommendation.MatrixFactorizationModel\r\nimport org.apache.spark.sql.Row\r\n\r\nimport org.apache.spark.SparkConf\r\nimport org.apache.spark.SparkContext\r\nimport org.apache.spark.SparkContext._\r\nimport org.apache.spark.broadcast.Broadcast\r\nimport org.apache.spark.rdd.RDD","user":"anonymous","dateUpdated":"2018-12-20T03:38:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.jblas.DoubleMatrix\ncosineSimilarity: (vec1: org.jblas.DoubleMatrix, vec2: org.jblas.DoubleMatrix)Double\nimport java.io.File\nimport scala.io.Source\nimport org.apache.log4j.Logger\nimport org.apache.log4j.Level\nimport org.apache.spark.ml.fpm.FPGrowth\nimport org.apache.spark.ml.feature.StringIndexer\nimport org.apache.spark.ml.feature.VectorAssembler\nimport org.apache.spark.broadcast.Broadcast\nimport org.apache.spark.ml.evaluation.RegressionEvaluator\nimport org.apache.spark.mllib.evaluation.RankingMetrics\nimport org.apache.spark.sql.functions._\nimport org.apache.spark.sql.functions.explode\nimport org.apache.spark.sql.{DataFrame, Dataset, SparkSession}\nimport org.apache.spark.mllib.recommendation.Rating\nimport org.apache.spark.mllib.recommendation.ALS\nimport org.apache.spark.mllib.recommendation.MatrixFactorizationModel\nimport org.apache.spark.sql.Row\nimport org.apache.spark.SparkConf\nimport org.apache.spark.SparkContext\nimport org.apache.spark.SparkContext._\nimport org.apache.spark.broadcast.Broadcast\nimport org.apache.spark.rdd.RDD\n"}]},"apps":[],"jobName":"paragraph_1545277098615_814325143","id":"20181219-101300_1616253788","dateCreated":"2018-12-20T03:38:18+0000","dateStarted":"2018-12-20T03:38:37+0000","dateFinished":"2018-12-20T03:39:02+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3218"},{"text":"val user_mapping = whole.select(\"user\",\"userID\").distinct.toDF()\nval product_mapping = whole.select(\"product\",\"productID\").distinct.toDF()\n","user":"anonymous","dateUpdated":"2018-12-20T10:16:06+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"user_mapping: org.apache.spark.sql.DataFrame = [user: string, userID: double]\nproduct_mapping: org.apache.spark.sql.DataFrame = [product: string, productID: double]\n"}]},"apps":[],"jobName":"paragraph_1545299742180_601920288","id":"20181220-095542_1962093979","dateCreated":"2018-12-20T09:55:42+0000","dateStarted":"2018-12-20T10:16:06+0000","dateFinished":"2018-12-20T10:16:12+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3219"},{"text":"product_mapping.filter(\"product == '8721ALG'\").show(1)\nproduct_mapping.filter(\"product == '43W9078'\").show(1)\nproduct_mapping.filter(\"product == '43W9049'\").show(1)\n","user":"anonymous","dateUpdated":"2018-12-20T10:28:53+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+---------+\n|product|productID|\n+-------+---------+\n|8721ALG|    220.0|\n+-------+---------+\n\n+-------+---------+\n|product|productID|\n+-------+---------+\n|43W9078|    216.0|\n+-------+---------+\n\n+-------+---------+\n|product|productID|\n+-------+---------+\n|43W9049|    206.0|\n+-------+---------+\n\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1203","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1204","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1205","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1206","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1207","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1208","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1209","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1210","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1211","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1212","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1213","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1214","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1215","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1216","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1217"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1545300955224_2027755410","id":"20181220-101555_1162186590","dateCreated":"2018-12-20T10:15:55+0000","dateStarted":"2018-12-20T10:28:41+0000","dateFinished":"2018-12-20T10:29:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3220"},{"text":"//raw dataset\n/*\nval transaction = spark.read.option(\"header\",\"true\").csv(\"s3://input-smart-find/Quotations-110818-S.csv\").select($\"Quotation: Quotation ID\".alias(\"user\"), $\"Product: Product Family\".alias(\"product\"),$\"Display Quantity\".alias(\"number\")).groupBy(\"user\",\"product\").agg(sum(\"number\").alias(\"rating\")).toDF()\n val product_description = spark.read.option(\"header\",\"true\").csv(\"s3://input-smart-find/products - 110818-s.csv\").select($\"Product Family\".alias(\"product\"), $\"Product Description\".alias(\"product_description\"))\n\nval userIndexer = new StringIndexer().setInputCol(\"user\").setOutputCol(\"userID\")\nval indexed = userIndexer.fit(transaction).transform(transaction)\nval productIndexer = new StringIndexer().setInputCol(\"product\").setOutputCol(\"productID\")\n*/\nval whole = productIndexer.fit(indexed).transform(indexed).withColumn(\"log\",expr(\"log(1+rating/0.00000001)\"))\n\n//whole.printSchema()\n//whole.show(10)\n\nval transform = whole.select($\"userID\".cast(\"int\"),$\"productID\".cast(\"int\"),$\"log\")\nval table = transform.groupBy(\"userID\",\"productID\").agg(sum(\"log\").alias(\"rating\")).toDF()\n\nval unique_product = table.dropDuplicates(\"productID\") //留下唯一productID  (A)\nval unique_user = table.dropDuplicates(\"userID\") //留下唯一userID\nval join = unique_user.union(unique_product) //兩個資料表append\nval unique_product_user = join.dropDuplicates() //重複record drop掉 -> 作為train set\n\nval test_notyet = table.except(unique_product_user) // 待分的testset\nval Array(training, test) = test_notyet.randomSplit(Array[Double](0.9, 0.1))\nval train_final = unique_product_user.union(training)\nval test_final = test\n\nval tableRDD = table.rdd.map(r => Rating(\n  r.getAs[Int](\"userID\"), r.getAs[Int](\"productID\"), r.getAs[Double](\"rating\")\n))\n\nval trainRDD = train_final.rdd.map(r => Rating(\n  r.getAs[Int](\"userID\"), r.getAs[Int](\"productID\"), r.getAs[Double](\"rating\")\n))\n\ndef expectedPercentileRanking(model: MatrixFactorizationModel, ratings: RDD[Rating]) = {\n    val itemFactors = model.productFeatures.collect() //itemFactors: Array[(Int, Array[Double])]\n    val itemMatrix = new DoubleMatrix(itemFactors.map(_._2)) //[Double]\n    val imBroadCast = sc.broadcast(itemMatrix)\n    val itemListPerUser = ratings.groupBy(_.user).map {\n      case (user, ratingList) => (user, ratingList.map(rt => (rt.product, rt.rating)).toArray)\n    }\n    // itemListPerUser: [(Int, Array[(Int, Double)])]\n    val rankRDD = model.userFeatures.join(itemListPerUser).map {\n        //(Int,     (Array[Double], Array[(Int, Double)]))\n      case (userId, (userFeatures, itemRatingList)) =>\n        val userVector = new DoubleMatrix(userFeatures)\n        val scores = imBroadCast.value.mmul(userVector) //用戶對各產品喜好分數乘積\n        \n        val sortedWithId = scores.data.zipWithIndex.sortBy(-_._1) //A. User 產品偏好分數由大到小排列\n        val itemsOrderedByPref = sortedWithId.map(_._2 + 1).toSeq // B. 抓取User喜好順序的對應產品ID ex. User0 : [P4,P3,P1]\n        \n        val rankWeightedByRating = itemRatingList.map {\n          case (itemId, rating) =>\n            rating *itemsOrderedByPref.indexOf(itemId).toDouble / (itemsOrderedByPref.size - 1)\n        \n        }.sum\n        rankWeightedByRating\n    }\n    \n    //rankRDD.take(3).foreach(println)\n    val weightedRankOverAll = rankRDD.sum()\n    val sumWeight = ratings.map(_.rating).sum()\n    weightedRankOverAll / sumWeight\n    \n  }\n","user":"anonymous","dateUpdated":"2018-12-20T07:47:46+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"whole: org.apache.spark.sql.DataFrame = [user: string, product: string ... 4 more fields]\ntransform: org.apache.spark.sql.DataFrame = [userID: int, productID: int ... 1 more field]\ntable: org.apache.spark.sql.DataFrame = [userID: int, productID: int ... 1 more field]\nunique_product: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [userID: int, productID: int ... 1 more field]\nunique_user: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [userID: int, productID: int ... 1 more field]\njoin: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [userID: int, productID: int ... 1 more field]\nunique_product_user: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [userID: int, productID: int ... 1 more field]\ntest_notyet: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [userID: int, productID: int ... 1 more field]\ntraining: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [userID: int, productID: int ... 1 more field]\ntest: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [userID: int, productID: int ... 1 more field]\ntrain_final: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [userID: int, productID: int ... 1 more field]\ntest_final: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [userID: int, productID: int ... 1 more field]\ntableRDD: org.apache.spark.rdd.RDD[org.apache.spark.mllib.recommendation.Rating] = MapPartitionsRDD[8094] at map at <console>:65\ntrainRDD: org.apache.spark.rdd.RDD[org.apache.spark.mllib.recommendation.Rating] = MapPartitionsRDD[8136] at map at <console>:77\nexpectedPercentileRanking: (model: org.apache.spark.mllib.recommendation.MatrixFactorizationModel, ratings: org.apache.spark.rdd.RDD[org.apache.spark.mllib.recommendation.Rating])Double\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=999","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1000"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1545277098615_-1722265588","id":"20181219-101335_1604308113","dateCreated":"2018-12-20T03:38:18+0000","dateStarted":"2018-12-20T07:47:46+0000","dateFinished":"2018-12-20T07:49:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3221"},{"text":"// Top_sale MAPK\n\n\n\n/*\nval top_sale =  train_final.groupBy(\"productID\").agg(sum(\"rating\").alias(\"Total_Amount\")).sort($\"Total_Amount\".desc).drop(\"Total_Amount\")\nval topSale_List = top_sale.select(\"productID\").collect().map(_(0)).toSeq\n\ndef top_avgPrecisionK(actual:Seq[Int],predicted:Seq[Any],k:Int):Double = {\n    val predK = predicted.take(k)\n    var score = 0.0\n    var numHits = 0.0\n    for((p,i) <- predK.zipWithIndex){\n        if(actual.contains(p)){\n            numHits += 1.0\n            score += numHits / (i.toDouble + 1.0)\n        }\n    }\n    if (actual.isEmpty)\n    {\n        1.0\n    }else{\n        score / scala.math.min(actual.size,k).toDouble\n    }\n}\n*/\ndef topSale_MAPK(TopSale: Seq[Any], ratings: RDD[Rating]) = {\n    val itemFactors = model.productFeatures.map { case (id, factor) => factor }.collect()\n    val itemMatrix = new DoubleMatrix(itemFactors)\n    println(itemMatrix.rows, itemMatrix.columns)\n    val imBroadcast = sc.broadcast(itemMatrix)\n    val allRecs = model.userFeatures.map{ case (userId, array) =>\n    val userVector = new DoubleMatrix(array)\n  val scores = imBroadcast.value.mmul(userVector)\n  val sortedWithId = scores.data.zipWithIndex.sortBy(-_._1)\n  val recommendedIds = sortedWithId.map(_._2 + 1).toSeq\n  (userId, recommendedIds)\n}\nval userMovies = tableRDD.map{ case Rating(user, product, rating) => (user, product) }.groupBy(_._1)\n    \n    \n    \n    val itemListPerUser = ratings.map{ case Rating(user,product,rating) => (user,product) }.groupBy(_._1)\n    val K = 10\n    val MAPK = allRecs.join(itemListPerUser).map{ case (userId, (predicted, actualWithIds)) =>\n    val actual = actualWithIds.map(_._2).toSeq\n      top_avgPrecisionK(actual, TopSale, K)\n    }.sum / allRecs.count\n    println(\"Mean Average Precision at K = \" + MAPK)\n  }\n  \ntopSale_MAPK(topSale_List,tableRDD)","user":"anonymous","dateUpdated":"2018-12-20T08:55:23+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"topSale_MAPK: (TopSale: Seq[Any], ratings: org.apache.spark.rdd.RDD[org.apache.spark.mllib.recommendation.Rating])Unit\n(24209,100)\nMean Average Precision at K = 0.047146040330170016\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1132","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1133","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1134"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1545277098616_-663034688","id":"20181219-065150_1388883603","dateCreated":"2018-12-20T03:38:18+0000","dateStarted":"2018-12-20T08:55:23+0000","dateFinished":"2018-12-20T09:01:04+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3222"},{"text":"train_final.groupBy(\"productID\").agg(sum(\"rating\").alias(\"Total_Amount\")).sort($\"Total_Amount\".desc).show(20)","user":"anonymous","dateUpdated":"2018-12-20T08:48:39+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------+------------------+\n|productID|      Total_Amount|\n+---------+------------------+\n|        0| 57930.12443865483|\n|        1|38002.762905447424|\n|        2|23089.760288936133|\n|        3| 20744.27540816125|\n|        4| 17572.63905833767|\n|        5| 16904.08353390675|\n|        6|16193.810515360823|\n|        7| 15062.53496284963|\n|        8|14850.544268466316|\n|        9|13767.252311212897|\n|       11|13631.698150290033|\n|       10|13162.291481833206|\n|       12|12540.717799662467|\n|       13|12060.562422094097|\n|       14|11413.246265944808|\n|       17|10646.780184030782|\n|       18|10576.550693436808|\n|       15| 10383.96880790564|\n|       16|10115.412299129852|\n|       19| 9843.159553345566|\n+---------+------------------+\nonly showing top 20 rows\n\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1130","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1131"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1545283986038_47620153","id":"20181220-053306_1576623746","dateCreated":"2018-12-20T05:33:06+0000","dateStarted":"2018-12-20T08:48:29+0000","dateFinished":"2018-12-20T08:53:14+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3223"},{"text":"//model\n/*\nval rank = 20\nval lambda = 0.01\nval alpha = 40\nval iterations = 8\n >>trainImplicit(ratings: RDD[Rating], rank: Int, iterations: Int, lambda: Double, alpha: Double): MatrixFactorizationModel\n*/\n//val model = ALS.trainImplicit(trainRDD, 12 ,4, 0.01 ,1)\n/*\nval model_A = ALS.trainImplicit(trainRDD, 50 ,12, 100 ,1)\nval model_B = ALS.trainImplicit(trainRDD, 50 ,12, 0.01 ,1)\nval model_C = ALS.trainImplicit(trainRDD, 100 ,12, 100 ,40)\nval model_D = ALS.trainImplicit(trainRDD, 100 ,12, 0.01 ,40)\n*/\nval model_E = ALS.trainImplicit(trainRDD, 10 ,8, 1 ,1)\n","user":"anonymous","dateUpdated":"2018-12-20T04:07:27+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"model_E: org.apache.spark.mllib.recommendation.MatrixFactorizationModel = org.apache.spark.mllib.recommendation.MatrixFactorizationModel@6fc2b35f\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=174","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=175","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=176","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=177","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=178","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=179","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=180","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=181","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=182","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=183","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=184","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=185","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=186","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=187","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=188","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=189","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=190","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=191","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=192","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=193","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=194","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=195","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=196","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=197"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1545277098616_693364051","id":"20181219-054635_1999148492","dateCreated":"2018-12-20T03:38:18+0000","dateStarted":"2018-12-20T04:07:27+0000","dateFinished":"2018-12-20T04:09:37+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3224"},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1545295612662_261121596","id":"20181220-084652_981513833","dateCreated":"2018-12-20T08:46:52+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:3225"},{"text":"val model = ALS.trainImplicit(trainRDD, 100 ,20, 1 ,1)\nval MAP_10_E = MAPK_10(model,tableRDD)","user":"anonymous","dateUpdated":"2018-12-20T08:40:43+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"model: org.apache.spark.mllib.recommendation.MatrixFactorizationModel = org.apache.spark.mllib.recommendation.MatrixFactorizationModel@59999d83\nMAP_10_E: Double = 0.004093337317653136\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1079","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1080","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1081","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1082","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1083","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1084","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1085","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1086","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1087","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1088","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1089","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1090","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1091","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1092","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1093","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1094","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1095","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1096","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1097","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1098","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1099","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1100","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1101","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1102","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1103","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1104","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1105","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1106","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1107","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1108","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1109","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1110","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1111","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1112","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1113","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1114","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1115","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1116","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1117","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1118","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1119","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1120","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1121","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1122","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1123","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1124","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1125","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1126","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1127","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1128","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1129"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1545279355730_2022318315","id":"20181220-041555_397864593","dateCreated":"2018-12-20T04:15:55+0000","dateStarted":"2018-12-20T08:40:43+0000","dateFinished":"2018-12-20T08:51:28+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3226"},{"text":"val MAP_10_E = MAPK_10(model,tableRDD)","user":"anonymous","dateUpdated":"2018-12-20T06:56:38+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"MAP_10_E: Double = 0.005411513431290591\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=996","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=997","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=998"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1545288995456_1478935822","id":"20181220-065635_1097002644","dateCreated":"2018-12-20T06:56:35+0000","dateStarted":"2018-12-20T06:56:38+0000","dateFinished":"2018-12-20T06:57:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3227"},{"text":"/*\nval MAP_10_A = MAPK_10(model_A,tableRDD)\nval MAP_10_B = MAPK_10(model_B,tableRDD)\nval MAP_10_C = MAPK_10(model_C,tableRDD)\nval MAP_10_D = MAPK_10(model_D,tableRDD)\n*/\nval MAP_2000_E = MAPK_2000(model_E,tableRDD)","user":"anonymous","dateUpdated":"2018-12-20T04:07:52+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"MAP_2000_E: Double = 0.006563163073319722\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=198","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=199","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=200"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1545277633694_189919252","id":"20181220-034713_769110584","dateCreated":"2018-12-20T03:47:13+0000","dateStarted":"2018-12-20T04:08:16+0000","dateFinished":"2018-12-20T04:11:03+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3228"},{"text":"def avgPrecisionK(actual: Seq[Int], predicted: Seq[Int], k: Int): Double = {\n      val predK = predicted.take(k)\n      var score = 0.0\n      var numHits = 0.0\n      for ((p, i) <- predK.zipWithIndex) {\n        if (actual.contains(p)) {\n          numHits += 1.0\n          score += numHits / (i.toDouble + 1.0)\n        }\n      }\n      if (actual.isEmpty) {\n        1.0\n      } else {\n        score / scala.math.min(actual.size, k).toDouble\n      }\n    }","user":"anonymous","dateUpdated":"2018-12-20T03:46:05+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1545277098617_886753455","id":"20181219-154131_329666705","dateCreated":"2018-12-20T03:38:18+0000","dateStarted":"2018-12-20T03:46:05+0000","dateFinished":"2018-12-20T03:56:32+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3229"},{"text":"def MAPK_10(model: MatrixFactorizationModel, ratings: RDD[Rating]) = {\n    val itemFactors = model.productFeatures.map { case (id, factor) => factor }.collect()\n    val itemMatrix = new DoubleMatrix(itemFactors)\n    val imBroadcast = sc.broadcast(itemMatrix)\n    val allRecs = model.userFeatures.map{ case (userId, array) =>\n  val userVector = new DoubleMatrix(array)\n  val scores = imBroadcast.value.mmul(userVector)\n  val sortedWithId = scores.data.zipWithIndex.sortBy(-_._1)\n  val recommendedIds = sortedWithId.map(_._2 + 1).toSeq\n  (userId, recommendedIds)\n    }\n    val userMovies = ratings.map{ case Rating(user, product, rating) => (user, product) }.groupBy(_._1)\n    val K = 10\n    val MAPK = allRecs.join(userMovies).map{ case (userId, (predicted, actualWithIds)) =>\n      val actual = actualWithIds.map(_._2).toSeq\n      avgPrecisionK(actual, predicted, K)\n    }.reduce(_ + _) / allRecs.count\n    MAPK\n}","user":"anonymous","dateUpdated":"2018-12-20T03:55:47+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1545277098617_-1826893985","id":"20181219-104127_393263427","dateCreated":"2018-12-20T03:38:18+0000","dateStarted":"2018-12-20T03:56:31+0000","dateFinished":"2018-12-20T03:56:33+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3230"},{"text":"def MAPK_2000(model: MatrixFactorizationModel, ratings: RDD[Rating]) = {\n    val itemFactors = model.productFeatures.map { case (id, factor) => factor }.collect()\n    val itemMatrix = new DoubleMatrix(itemFactors)\n    val imBroadcast = sc.broadcast(itemMatrix)\n    val allRecs = model.userFeatures.map{ case (userId, array) =>\n  val userVector = new DoubleMatrix(array)\n  val scores = imBroadcast.value.mmul(userVector)\n  val sortedWithId = scores.data.zipWithIndex.sortBy(-_._1)\n  val recommendedIds = sortedWithId.map(_._2 + 1).toSeq\n  (userId, recommendedIds)\n    }\n    val userMovies = ratings.map{ case Rating(user, product, rating) => (user, product) }.groupBy(_._1)\n    val K = 2000\n    val MAPK = allRecs.join(userMovies).map{ case (userId, (predicted, actualWithIds)) =>\n      val actual = actualWithIds.map(_._2).toSeq\n      avgPrecisionK(actual, predicted, K)\n    }.reduce(_ + _) / allRecs.count\n    MAPK\n}","user":"anonymous","dateUpdated":"2018-12-20T03:55:51+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1545277660310_1773496471","id":"20181220-034740_1262081346","dateCreated":"2018-12-20T03:47:40+0000","dateStarted":"2018-12-20T03:56:32+0000","dateFinished":"2018-12-20T03:56:34+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3231"},{"text":"// model MAPK\n/*\nval itemFactors = model.productFeatures.map { case (id, factor) => factor }.collect()\nval itemMatrix = new DoubleMatrix(itemFactors)\nprintln(itemMatrix.rows, itemMatrix.columns)\nval imBroadcast = sc.broadcast(itemMatrix)\nval allRecs = model.userFeatures.map{ case (userId, array) =>\n  val userVector = new DoubleMatrix(array)\n  val scores = imBroadcast.value.mmul(userVector)\n  val sortedWithId = scores.data.zipWithIndex.sortBy(-_._1)\n  val recommendedIds = sortedWithId.map(_._2 + 1).toSeq\n  (userId, recommendedIds)\n}\nval userMovies = tableRDD.map{ case Rating(user, product, rating) => (user, product) }.groupBy(_._1)\nval K = 10\nval MAPK = allRecs.join(userMovies).map{ case (userId, (predicted, actualWithIds)) =>\n  val actual = actualWithIds.map(_._2).toSeq\n  avgPrecisionK(actual, predicted, K)\n}.reduce(_ + _) / allRecs.count\nprintln(\"Mean Average Precision at K = \" + MAPK)\n","user":"anonymous","dateUpdated":"2018-12-20T03:38:18+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"itemFactors: Array[Array[Double]] = Array(Array(0.08348014950752258, -0.030914105474948883, 0.08476600795984268, -0.10627568513154984, -0.0479629822075367, 0.10869155824184418, 0.12310085445642471, 0.13574707508087158, 0.1430288404226303, 0.05294808745384216, 0.07786266505718231, 0.033959873020648956), Array(-0.043595314025878906, -0.04381967708468437, 0.0325191430747509, -0.025480398908257484, 0.022960182279348373, 0.06042315810918808, -0.02986394241452217, 0.004338726866990328, -0.007992764934897423, 0.021361472085118294, 0.06678657233715057, 0.044602494686841965), Array(-0.017556706443428993, -0.014916899614036083, -0.007979721762239933, 0.04112327843904495, 0.01029288861900568, 0.025848427787423134, -0.016928160563111305, 0.042638085782527924, 0.006795433349907398, 2.742831384239252...itemMatrix: org.jblas.DoubleMatrix = [0.08348014950752258, -0.030914105474948883, 0.08476600795984268, -0.10627568513154984, -0.0479629822075367, 0.10869155824184418, 0.12310085445642471, 0.13574707508087158, 0.1430288404226303, 0.05294808745384216, 0.07786266505718231, 0.033959873020648956; -0.043595314025878906, -0.04381967708468437, 0.0325191430747509, -0.025480398908257484, 0.022960182279348373, 0.06042315810918808, -0.02986394241452217, 0.004338726866990328, -0.007992764934897423, 0.021361472085118294, 0.06678657233715057, 0.044602494686841965; -0.017556706443428993, -0.014916899614036083, -0.007979721762239933, 0.04112327843904495, 0.01029288861900568, 0.025848427787423134, -0.016928160563111305, 0.042638085782527924, 0.006795433349907398, 2.7428313842392527E-5, 0.0404630787670612...(24209,12)\nimBroadcast: org.apache.spark.broadcast.Broadcast[org.jblas.DoubleMatrix] = Broadcast(1018)\nallRecs: org.apache.spark.rdd.RDD[(Int, Seq[Int])] = MapPartitionsRDD[3246] at map at <console>:119\nuserMovies: org.apache.spark.rdd.RDD[(Int, Iterable[(Int, Int)])] = ShuffledRDD[3249] at groupBy at <console>:96\nK: Int = 10\nMAPK: Double = 0.002116132520634851\nMean Average Precision at K = 0.002116132520634851\n"}]},"apps":[],"jobName":"paragraph_1545277098617_76653364","id":"20181219-070057_1933922835","dateCreated":"2018-12-20T03:38:18+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3232"},{"text":"/*\ntopSalePercentileRanking(topSale_List,tableRDD)\nexpectedPercentileRanking(model, tableRDD)","user":"anonymous","dateUpdated":"2018-12-20T03:38:18+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res310: Double = 0.1322136557678616\nres311: Double = 0.47039061536276405\n"}]},"apps":[],"jobName":"paragraph_1545277098618_-1213037473","id":"20181219-073735_1734794940","dateCreated":"2018-12-20T03:38:18+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3233"},{"text":"/*\nval topKRecs = model.recommendProducts(12,20)\n//println(topKRecs.mkString(\"n\"))\nval moviesForUser = tableRDD.keyBy(_.user).lookup(12)\nmoviesForUser.sortBy(-_.rating).take(10).map(rating => (rating.product,rating.rating)).foreach(println)\nprintln(moviesForUser.size)\nval actualMovies = moviesForUser.map(_.product)\nval predictedMovies = topKRecs.map(_.product)\nval apk10 = avgPrecisionK(actualMovies,predictedMovies,10)\n\nval actualMovies = moviesForUser.map(_.product)\nval predictedMovies = topKRecs.map(_.product)\nval apk10 = avgPrecisionK(actualMovies,predictedMovies,10)","user":"anonymous","dateUpdated":"2018-12-20T03:38:18+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"topKRecs: Array[org.apache.spark.mllib.recommendation.Rating] = Array(Rating(12,15,2.5251431824426422), Rating(12,67,2.2502391110717914), Rating(12,49,2.1656740495949793), Rating(12,1,2.05762607606105), Rating(12,112,1.926554150147727), Rating(12,66,1.8132796962963056), Rating(12,76,1.8010612768367866), Rating(12,68,1.7997603155371271), Rating(12,13,1.6876143403372197), Rating(12,9,1.6856053538731586), Rating(12,51,1.5956234251800936), Rating(12,34,1.479441422974599), Rating(12,101,1.4559800556672384), Rating(12,107,1.4333393990548444), Rating(12,157,1.400737179277833), Rating(12,98,1.3973439149669757), Rating(12,105,1.3535696663161345), Rating(12,39,1.2799528763191292), Rating(12,20,1.2271606280393401), Rating(12,465,1.1579609936277673))\nmoviesForUser: Seq[org.apache.spark.mllib.recommendation.Rating] = WrappedArray(Rating(12,2520,24.63528884239456), Rating(12,3558,24.63528884239456), Rating(12,1231,24.63528884239456), Rating(12,2987,24.63528884239456), Rating(12,822,24.63528884239456), Rating(12,1525,24.63528884239456), Rating(12,3204,24.63528884239456), Rating(12,2096,24.63528884239456), Rating(12,2990,24.63528884239456), Rating(12,3129,24.63528884239456), Rating(12,1370,24.63528884239456), Rating(12,1582,24.63528884239456), Rating(12,380,24.63528884239456), Rating(12,1057,24.63528884239456), Rating(12,657,24.63528884239456), Rating(12,1493,24.63528884239456), Rating(12,1012,24.63528884239456), Rating(12,533,24.63528884239456), Rating(12,1155,24.63528884239456), Rating(12,2168,24.63528884239456), Rating(12,2878,24.635...(2520,24.63528884239456)\n(3558,24.63528884239456)\n(1231,24.63528884239456)\n(2987,24.63528884239456)\n(822,24.63528884239456)\n(1525,24.63528884239456)\n(3204,24.63528884239456)\n(2096,24.63528884239456)\n(2990,24.63528884239456)\n(3129,24.63528884239456)\n180\nactualMovies: Seq[Int] = ArrayBuffer(2520, 3558, 1231, 2987, 822, 1525, 3204, 2096, 2990, 3129, 1370, 1582, 380, 1057, 657, 1493, 1012, 533, 1155, 2168, 2878, 1601, 2406, 665, 576, 1657, 1572, 3412, 465, 1519, 2568, 2334, 3032, 3599, 2697, 2725, 728, 2969, 2441, 2320, 1107, 606, 2252, 2109, 3348, 1636, 3413, 1765, 2216, 3248, 2298, 1711, 1176, 2747, 834, 2706, 2120, 1253, 711, 784, 3046, 1260, 1829, 2630, 570, 3185, 702, 1326, 1568, 1855, 2624, 1731, 2260, 2749, 2105, 2364, 1421, 1695, 2855, 2605, 2866, 1435, 2797, 712, 1047, 1529, 1800, 689, 3499, 1267, 1509, 2267, 2063, 2390, 3349, 2816, 2951, 1433, 1724, 2564, 2510, 739, 2778, 2644, 1883, 3205, 1637, 1642, 3464, 1030, 2615, 2353, 1583, 2939, 1536, 1921, 3065, 1070, 3143, 2944, 2095, 1635, 3378, 2203, 2815, 938, 603, 1925, 1249, 2718,...predictedMovies: Array[Int] = Array(15, 67, 49, 1, 112, 66, 76, 68, 13, 9, 51, 34, 101, 107, 157, 98, 105, 39, 20, 465)\napk10: Double = 0.0\nactualMovies: Seq[Int] = ArrayBuffer(2520, 3558, 1231, 2987, 822, 1525, 3204, 2096, 2990, 3129, 1370, 1582, 380, 1057, 657, 1493, 1012, 533, 1155, 2168, 2878, 1601, 2406, 665, 576, 1657, 1572, 3412, 465, 1519, 2568, 2334, 3032, 3599, 2697, 2725, 728, 2969, 2441, 2320, 1107, 606, 2252, 2109, 3348, 1636, 3413, 1765, 2216, 3248, 2298, 1711, 1176, 2747, 834, 2706, 2120, 1253, 711, 784, 3046, 1260, 1829, 2630, 570, 3185, 702, 1326, 1568, 1855, 2624, 1731, 2260, 2749, 2105, 2364, 1421, 1695, 2855, 2605, 2866, 1435, 2797, 712, 1047, 1529, 1800, 689, 3499, 1267, 1509, 2267, 2063, 2390, 3349, 2816, 2951, 1433, 1724, 2564, 2510, 739, 2778, 2644, 1883, 3205, 1637, 1642, 3464, 1030, 2615, 2353, 1583, 2939, 1536, 1921, 3065, 1070, 3143, 2944, 2095, 1635, 3378, 2203, 2815, 938, 603, 1925, 1249, 2718,...predictedMovies: Array[Int] = Array(15, 67, 49, 1, 112, 66, 76, 68, 13, 9, 51, 34, 101, 107, 157, 98, 105, 39, 20, 465)\napk10: Double = 0.0\n"}]},"apps":[],"jobName":"paragraph_1545277098618_1019524596","id":"20181219-075331_849319406","dateCreated":"2018-12-20T03:38:18+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3234"},{"text":"/*\nmodel.predict(12,293)\nmodel.predict(12,394)\nmodel.predict(12,222)\nmodel.predict(12,359)\nmodel.predict(12,1250)","user":"anonymous","dateUpdated":"2018-12-20T03:38:18+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res350: Double = 2.4748442183399852\nres351: Double = 2.201863627246103\nres352: Double = 2.1194332266310885\nres353: Double = -0.09867575348863689\nres354: Double = 0.34479586366371795\n"}]},"apps":[],"jobName":"paragraph_1545277098618_825954854","id":"20181219-091558_626172647","dateCreated":"2018-12-20T03:38:18+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3235"},{"text":"/*\n    \n   for (rank <- ranks; lambda <- lambdas; numIter <- numIters; alpha <- alphas ) {\n      val model = ALS.trainImplicit(trainRDD, rank, numIter, lambda, alpha)\n      val rank_in = expectedPercentileRanking(model, tableRDD)\n      println(\"Percentil Ranking = \" + rank_in + \" for the model trained with rank = \"\n        + rank + \n        \", lambda = \" + lambda + \n        \", alpha = \" + alpha + \n        \", and numIter = \" + numIter + \".\")\n      if (rank_in < bestRanking) {\n        bestModel = Some(model)\n        bestRanking = rank_in\n        bestRank = rank\n        bestLambda = lambda\n        bestNumIter = numIter\n        bestAlpha = alpha\n      }\n    }\n\n    val test_PercentileRanking = rank_in\n\n    println(\"The best model was trained with ranking = \" + bestRanking + \" and rank = \" + bestRank + \" and lambda = \" + bestLambda\n      + \", and numIter = \" + bestNumIter + \", and its RMSE on the test set is \" + test_PercentileRanking + \".\")","user":"anonymous","dateUpdated":"2018-12-20T03:38:18+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1545277098619_1551095181","id":"20181219-103950_730186203","dateCreated":"2018-12-20T03:38:18+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3236"},{"text":"// cross validation model and MAPK\n     val ranks = Array(50,100,200)\n    val lambdas = Array(1,150,500)\n    val alphas = Array(1,20,40)\n    val numIters = Array(12,20,40)\n    var bestModel: Option[MatrixFactorizationModel] = None\n    var bestMAP = 99.0\n    var bestRank = 0\n    var bestLambda = -1.0\n    var bestNumIter = -1\n    var bestAlpha = 0.0\n     for (rank <- ranks; lambda <- lambdas; numIter <- numIters; alpha <- alphas ) {\n        val model = ALS.trainImplicit(trainRDD, rank ,numIter, lambda ,alpha)\n        val MAPK_value = MAPK_10(model, tableRDD)\n        /*\n      println(\"MAP = \" + MAPK_value + \" for the model trained with rank = \"\n        + rank + \n        \", lambda = \" + lambda + \n        \", alpha = \" + alpha + \n        \", and numIter = \" + numIter + \".\")\n        */\n        println(\"---------------------------------\")\n        println(\"MAP                           | rank |lambda |alpha| iter\")\n        println(MAPK_value + \"|\" + rank + \"|\" + lambda + \"|\" + alpha + \"|\" + numIter )\n        println(\"---------------------------------\")\n            \n      if (MAPK_value < bestMAP) {\n        bestModel = Some(model)\n        bestMAP = MAPK_value\n        bestRank = rank\n        bestLambda = lambda\n        bestNumIter = numIter\n        bestAlpha = alpha\n      }\n    }\n\n    val test_PercentileRanking = MAPK_value\n\n    println(\"The best model was trained with ranking = \" + bestRanking + \" and rank = \" + bestRank + \" and lambda = \" + bestLambda\n      + \", and numIter = \" + bestNumIter + \", and its RMSE on the test set is \" + test_PercentileRanking + \".\")\n","user":"anonymous","dateUpdated":"2018-12-20T11:18:43+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"ranks: Array[Int] = Array(50, 100, 200)\nlambdas: Array[Int] = Array(1, 150, 500)\nalphas: Array[Int] = Array(1, 20, 40)\nnumIters: Array[Int] = Array(12, 20, 40)\nbestModel: Option[org.apache.spark.mllib.recommendation.MatrixFactorizationModel] = None\nbestMAP: Double = 99.0\nbestRank: Int = 0\nbestLambda: Double = -1.0\nbestNumIter: Int = -1\nbestAlpha: Double = 0.0\n---------------------------------\nMAP                           | rank |lambda |alpha| iter\n0.005543373809044875|50|1|1|12\n---------------------------------\norg.apache.spark.SparkException: Job 1312 cancelled because SparkContext was shut down\n  at org.apache.spark.scheduler.DAGScheduler$$anonfun$cleanUpAfterSchedulerStop$1.apply(DAGScheduler.scala:877)\n  at org.apache.spark.scheduler.DAGScheduler$$anonfun$cleanUpAfterSchedulerStop$1.apply(DAGScheduler.scala:875)\n  at scala.collection.mutable.HashSet.foreach(HashSet.scala:78)\n  at org.apache.spark.scheduler.DAGScheduler.cleanUpAfterSchedulerStop(DAGScheduler.scala:875)\n  at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onStop(DAGScheduler.scala:2048)\n  at org.apache.spark.util.EventLoop.stop(EventLoop.scala:83)\n  at org.apache.spark.scheduler.DAGScheduler.stop(DAGScheduler.scala:1955)\n  at org.apache.spark.SparkContext$$anonfun$stop$8.apply$mcV$sp(SparkContext.scala:1931)\n  at org.apache.spark.util.Utils$.tryLogNonFatalError(Utils.scala:1361)\n  at org.apache.spark.SparkContext.stop(SparkContext.scala:1930)\n  at org.apache.spark.scheduler.cluster.YarnClientSchedulerBackend$MonitorThread.run(YarnClientSchedulerBackend.scala:112)\n  at org.apache.spark.scheduler.DAGScheduler.runJob(DAGScheduler.scala:682)\n  at org.apache.spark.SparkContext.runJob(SparkContext.scala:2034)\n  at org.apache.spark.SparkContext.runJob(SparkContext.scala:2131)\n  at org.apache.spark.rdd.RDD$$anonfun$reduce$1.apply(RDD.scala:1035)\n  at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:151)\n  at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:112)\n  at org.apache.spark.rdd.RDD.withScope(RDD.scala:363)\n  at org.apache.spark.rdd.RDD.reduce(RDD.scala:1017)\n  at MAPK_10(<console>:71)\n  at $anonfun$1$$anonfun$apply$mcVI$sp$1$$anonfun$apply$mcVI$sp$2$$anonfun$apply$mcVI$sp$3.apply$mcVI$sp(<console>:122)\n  at $anonfun$1$$anonfun$apply$mcVI$sp$1$$anonfun$apply$mcVI$sp$2$$anonfun$apply$mcVI$sp$3.apply(<console>:120)\n  at $anonfun$1$$anonfun$apply$mcVI$sp$1$$anonfun$apply$mcVI$sp$2$$anonfun$apply$mcVI$sp$3.apply(<console>:120)\n  at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)\n  at scala.collection.mutable.ArrayOps$ofInt.foreach(ArrayOps.scala:234)\n  at $anonfun$1$$anonfun$apply$mcVI$sp$1$$anonfun$apply$mcVI$sp$2.apply$mcVI$sp(<console>:120)\n  at $anonfun$1$$anonfun$apply$mcVI$sp$1$$anonfun$apply$mcVI$sp$2.apply(<console>:120)\n  at $anonfun$1$$anonfun$apply$mcVI$sp$1$$anonfun$apply$mcVI$sp$2.apply(<console>:120)\n  at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)\n  at scala.collection.mutable.ArrayOps$ofInt.foreach(ArrayOps.scala:234)\n  at $anonfun$1$$anonfun$apply$mcVI$sp$1.apply$mcVI$sp(<console>:120)\n  at $anonfun$1$$anonfun$apply$mcVI$sp$1.apply(<console>:120)\n  at $anonfun$1$$anonfun$apply$mcVI$sp$1.apply(<console>:120)\n  at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)\n  at scala.collection.mutable.ArrayOps$ofInt.foreach(ArrayOps.scala:234)\n  at $anonfun$1.apply$mcVI$sp(<console>:120)\n  at $anonfun$1.apply(<console>:120)\n  at $anonfun$1.apply(<console>:120)\n  at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33)\n  at scala.collection.mutable.ArrayOps$ofInt.foreach(ArrayOps.scala:234)\n  ... 56 elided\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1244","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1245","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1246","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1247","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1248","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1249","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1250","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1251","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1252","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1253","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1254","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1255","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1256","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1257","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1258","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1259","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1260","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1261","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1262","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1263","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1264","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1265","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1266","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1267","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1268","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1269","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1270","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1271","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1272","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1273","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1274","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1275","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1276","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1277","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1278","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1279","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1280","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1281","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1282","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1283","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1284","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1285","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1286","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1287","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1288","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1289","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1290","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1291","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1292","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1293","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1294","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1295","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1296","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1297","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1298","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1299","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1300","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1301","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1302","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1303","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1304","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1305","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1306","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1307","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1308","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1309","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1310","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1311","http://ip-172-31-35-197.ec2.internal:4040/jobs/job?id=1312"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1545277098619_231152328","id":"20181219-095806_267022196","dateCreated":"2018-12-20T03:38:18+0000","dateStarted":"2018-12-20T11:18:43+0000","dateFinished":"2018-12-20T12:45:35+0000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:3237"},{"user":"anonymous","dateUpdated":"2018-12-20T03:38:18+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1545277098620_-1270270685","id":"20181219-104928_531492016","dateCreated":"2018-12-20T03:38:18+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3238"}],"name":"Follow_Book","id":"2DXF2X7GT","noteParams":{},"noteForms":{},"angularObjects":{"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}