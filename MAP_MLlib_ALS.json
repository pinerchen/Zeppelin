{"paragraphs":[{"text":"%dep\r\nz.load(\"org.scalanlp:jblas:1.2.1\")\r\n","user":"anonymous","dateUpdated":"2018-12-19T01:55:29+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res0: org.apache.zeppelin.dep.Dependency = org.apache.zeppelin.dep.Dependency@364dd2ed\n"}]},"apps":[],"jobName":"paragraph_1545184439553_2043452140","id":"20181212-015843_1688763497","dateCreated":"2018-12-19T01:53:59+0000","dateStarted":"2018-12-19T01:55:29+0000","dateFinished":"2018-12-19T01:55:41+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:93671"},{"text":"// 导入jblas库中的矩阵类\nimport org.jblas.DoubleMatrix\n// 定义相似度函数\ndef cosineSimilarity(vec1: DoubleMatrix, vec2: DoubleMatrix): Double = {\n    vec1.dot(vec2) / (vec1.norm2() * vec2.norm2())\n}\n","user":"anonymous","dateUpdated":"2018-12-19T01:55:30+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.jblas.DoubleMatrix\ncosineSimilarity: (vec1: org.jblas.DoubleMatrix, vec2: org.jblas.DoubleMatrix)Double\n"}]},"apps":[],"jobName":"paragraph_1545184439558_-2126443678","id":"20181212-015920_1065716449","dateCreated":"2018-12-19T01:53:59+0000","dateStarted":"2018-12-19T01:55:34+0000","dateFinished":"2018-12-19T01:56:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:93672"},{"text":"import java.io.File\nimport scala.io.Source\nimport org.apache.log4j.Logger\nimport org.apache.log4j.Level\n\nimport org.apache.spark.ml.fpm.FPGrowth\nimport org.apache.spark.ml.feature.StringIndexer\nimport org.apache.spark.ml.feature.VectorAssembler\nimport org.apache.spark.broadcast.Broadcast\nimport org.apache.spark.ml.evaluation.RegressionEvaluator\nimport org.apache.spark.mllib.evaluation.RankingMetrics\n\nimport org.apache.spark.sql.functions._\nimport org.apache.spark.sql.functions.explode\nimport org.apache.spark.sql.{DataFrame, Dataset,SparkSession}\n\nimport org.apache.spark.mllib.recommendation.Rating\nimport org.apache.spark.mllib.recommendation.ALS\nimport org.apache.spark.mllib.recommendation.MatrixFactorizationModel\nimport org.apache.spark.sql.Row\n\nimport org.apache.spark.SparkConf\nimport org.apache.spark.SparkContext\nimport org.apache.spark.SparkContext._\nimport org.apache.spark.broadcast.Broadcast\nimport org.apache.spark.rdd.RDD","user":"anonymous","dateUpdated":"2018-12-19T03:38:51+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import java.io.File\nimport scala.io.Source\nimport org.apache.log4j.Logger\nimport org.apache.log4j.Level\nimport org.apache.spark.ml.fpm.FPGrowth\nimport org.apache.spark.ml.feature.StringIndexer\nimport org.apache.spark.ml.feature.VectorAssembler\nimport org.apache.spark.broadcast.Broadcast\nimport org.apache.spark.ml.evaluation.RegressionEvaluator\nimport org.apache.spark.mllib.evaluation.RankingMetrics\nimport org.apache.spark.sql.functions._\nimport org.apache.spark.sql.functions.explode\nimport org.apache.spark.sql.{DataFrame, Dataset, SparkSession}\nimport org.apache.spark.mllib.recommendation.Rating\nimport org.apache.spark.mllib.recommendation.ALS\nimport org.apache.spark.mllib.recommendation.MatrixFactorizationModel\nimport org.apache.spark.sql.Row\nimport org.apache.spark.SparkConf\nimport org.apache.spark.SparkContext\nimport org.apache.spark.SparkContext._\nimport org.apache.spark.broadcast.Broadcast\nimport org.apache.spark.rdd.RDD\n"}]},"apps":[],"jobName":"paragraph_1545184439559_94417292","id":"20181212-015934_389368932","dateCreated":"2018-12-19T01:53:59+0000","dateStarted":"2018-12-19T03:38:51+0000","dateFinished":"2018-12-19T03:38:54+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:93673"},{"text":"//raw dataset\n/*\nval transaction = spark.read.option(\"header\",\"true\").csv(\"s3://input-smart-find/Quotations-110818-S.csv\").select($\"Quotation: Quotation ID\".alias(\"user\"), $\"Product: Product Family\".alias(\"product\"),$\"Display Quantity\".alias(\"number\")).groupBy(\"user\",\"product\").agg(sum(\"number\").alias(\"rating\")).toDF()\n val product_description = spark.read.option(\"header\",\"true\").csv(\"s3://input-smart-find/products - 110818-s.csv\").select($\"Product Family\".alias(\"product\"), $\"Product Description\".alias(\"product_description\"))\n\nval userIndexer = new StringIndexer().setInputCol(\"user\").setOutputCol(\"userID\")\nval indexed = userIndexer.fit(transaction).transform(transaction)\nval productIndexer = new StringIndexer().setInputCol(\"product\").setOutputCol(\"productID\")\n*/ \nval whole = productIndexer.fit(indexed).transform(indexed).withColumn(\"log\",expr(\"log(1+rating/0.00000001)\"))\n\n//whole.printSchema()\n//whole.show(10)\n\nval transform = whole.select($\"userID\".cast(\"int\"),$\"productID\".cast(\"int\"),$\"log\")\nval table = transform.groupBy(\"userID\",\"productID\").agg(sum(\"log\").alias(\"rating\")).toDF()","user":"anonymous","dateUpdated":"2018-12-19T08:26:27+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"whole: org.apache.spark.sql.DataFrame = [user: string, product: string ... 4 more fields]\ntransform: org.apache.spark.sql.DataFrame = [userID: int, productID: int ... 1 more field]\ntable: org.apache.spark.sql.DataFrame = [userID: int, productID: int ... 1 more field]\n"}]},"apps":[],"jobName":"paragraph_1545184439559_-716481365","id":"20181212-020008_856232412","dateCreated":"2018-12-19T01:53:59+0000","dateStarted":"2018-12-19T08:26:27+0000","dateFinished":"2018-12-19T08:27:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:93674","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=374"],"interpreterSettingId":"spark"}}},{"text":"\nval indexer_map = whole.drop(\"log\").toDF()\nindexer_map.write.option(\"header\",\"true\").format(\"csv\").mode(\"overwrite\").save(\"s3://find-smart-input/indexerMap.csv\")\n","user":"anonymous","dateUpdated":"2018-12-19T01:53:59+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"indexer_map: org.apache.spark.sql.DataFrame = [user: string, product: string ... 3 more fields]\n"}]},"apps":[],"jobName":"paragraph_1545184439560_533638628","id":"20181218-035151_195707821","dateCreated":"2018-12-19T01:53:59+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:93675"},{"text":"indexer_map.show()","user":"anonymous","dateUpdated":"2018-12-19T01:53:59+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----------+----------+------+-------+---------+\n|      user|   product|rating| userID|productID|\n+----------+----------+------+-------+---------+\n|Q-00006876|10MQS79500| 150.0| 3545.0|  12144.0|\n|Q-00004324|4Z90Q25510| 500.0| 7696.0|  21270.0|\n|Q-00018356|10LKPAT6EU|  16.0| 5969.0|   1140.0|\n|Q-00028520|4X30H56828|   5.0|14868.0|    231.0|\n|Q-00009760|4XH0N04885| 100.0|13316.0|    746.0|\n|Q-00022082|   0A36536|  50.0| 2245.0|     61.0|\n|Q-00063689|   39Y7937|   4.0| 4971.0|    123.0|\n|Q-00017806|10QYPAT1UK| 500.0|12599.0|     29.0|\n|Q-00074595|7Y37A01086|   1.0|  591.0|    452.0|\n|Q-00054445|61A6MAT3EU|  15.0|17770.0|      7.0|\n|Q-00004794|20K3S18700| 200.0|  647.0|   3399.0|\n|Q-00068740|20L5000APG|  10.0| 8583.0|    656.0|\n|Q-00057297|20LTS0VK00|  50.0|26254.0|   7177.0|\n|Q-00010483|30BH000FUK|   3.0| 2056.0|   3176.0|\n|Q-00039557|4XF0P01010|  50.0|12651.0|   1521.0|\n|Q-00054097|20L5000AIV|  10.0| 7337.0|    998.0|\n|Q-00058280|40AF0135UK|2000.0|   71.0|     11.0|\n|Q-00057009|20LAS29100|  20.0|16566.0|  22565.0|\n|Q-00002245|40A00065UK|  50.0|27443.0|    145.0|\n|Q-00003451|20HES19B00|  50.0|  191.0|  11340.0|\n+----------+----------+------+-------+---------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1545184439560_-1838029943","id":"20181218-052057_538022884","dateCreated":"2018-12-19T01:53:59+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:93676"},{"text":"//whole.show(5)\n","user":"anonymous","dateUpdated":"2018-12-19T01:53:59+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+-----------------+-----------------+------------------+\n|summary|           userID|        productID|            rating|\n+-------+-----------------+-----------------+------------------+\n|  count|           140062|           140062|            140062|\n|   mean|6952.679763247705| 3182.26753866145|15.199115814609756|\n| stddev|8414.775901249903|5448.523067208439|  2.04591388984925|\n|    min|                0|                0|               0.0|\n|    max|            33983|            24208|21.821878125947855|\n+-------+-----------------+-----------------+------------------+\n\n"}]},"apps":[],"jobName":"paragraph_1545184439561_688961898","id":"20181218-021654_1783865405","dateCreated":"2018-12-19T01:53:59+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:93677"},{"text":"// table.count() //140062\nval numUsers = table.select(table.col(\"userID\")).distinct().count() \nval numProducts = table.select(table.col(\"productID\")).distinct().count()\n//numUsers //33984\n// numProducts //24209\n\n/*\n+------+---------+\n|unique|unique   |\n|user  |product  |\n+------+---------+\n| 33984|    24209|\n+------+---------+\n\n\n\n*/\n","user":"anonymous","dateUpdated":"2018-12-19T01:53:59+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"numUsers: Long = 33984\nnumProducts: Long = 24209\n"}]},"apps":[],"jobName":"paragraph_1545184439561_1439951547","id":"20181212-023543_1975592944","dateCreated":"2018-12-19T01:53:59+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:93678"},{"text":"// filter某用戶在某產品購買數量最多的紀錄\n//whole.sort($\"rating\".desc).show \n/*\n+----------+----------+-------+-------+---------+------------------+\n|      user|   product| rating| userID|productID|               log|\n+----------+----------+-------+-------+---------+------------------+\n|Q-00030883|10M4S00R00|30000.0|14060.0|  10806.0|21.821878125947855|\n|Q-00063632|61B7JAT6EU|30000.0|17747.0|     60.0|21.821878125947855|\n|Q-00063632|61CAKAT1EU|30000.0|17747.0|    207.0|21.821878125947855|\n|Q-00030883|10QYPAT1EU|30000.0|14060.0|     26.0|21.821878125947855|\n|Q-00068476|20LTS6P200|29200.0|10726.0|  23877.0|21.794849453569068|\n|Q-00036576|4XE0G97138|29200.0|18963.0|     62.0|21.794849453569068|\n|Q-00068476|4XE0G97138|29200.0|10726.0|     62.0|21.794849453569068|\n|Q-00068476| 888015205|29200.0|10726.0|    153.0|21.794849453569068|\n|Q-00036576| 888015205|29200.0|18963.0|    153.0|21.794849453569068|\n|Q-00064016| 888015205|28000.0|18382.0|    153.0|21.752885254484713|\n+----------+----------+-------+-------+---------+\n*/\n\n\n// filter 消費數量最高的前10大用戶\nval user_ratingSum = whole.groupBy(\"userID\").agg(sum(\"rating\").alias(\"Total_Amount\")).sort($\"Total_Amount\".desc).show\nval user_ratingCount = whole.groupBy(\"userID\").agg(count(\"rating\").alias(\"Rating_count\")).sort($\"Rating_count\".desc).show()\n/*\n+------+------------+\n|userID|Total_Amount|\n+------+------------+\n|   3.0|    537000.0|\n|  54.0|    344450.0|\n| 282.0|    250800.0|\n| 334.0|    230800.0|\n|  71.0|    173000.0|\n| 719.0|    170800.0|\n|1054.0|    160000.0|\n| 685.0|    158000.0|\n| 707.0|    154000.0|\n| 760.0|    148000.0|\n+------+------------+\n\n*/\n\n// top 10 sale\n//val top_sale =  training_final.groupBy(\"productID\").agg(sum(\"rating\").alias(\"Total_Amount\")).sort($\"Total_Amount\".desc)\n/*\n+---------+------------+\n|productID|Total_Amount|\n+---------+------------+\n|      0.0|    577598.0|\n|      1.0|    492920.0|\n|      5.0|    288709.0|\n|      4.0|    272528.0|\n|      3.0|    262920.0|\n|      8.0|    236287.0|\n|     18.0|    228088.0|\n|     11.0|    221678.0|\n|      2.0|    213747.0|\n|    153.0|    201092.0|\n+---------+------------+\n\n*/","user":"anonymous","dateUpdated":"2018-12-19T06:45:36+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------+------------+\n|userID|Total_Amount|\n+------+------------+\n|   3.0|    537000.0|\n|  54.0|    344450.0|\n| 282.0|    250800.0|\n| 334.0|    230800.0|\n|  71.0|    173000.0|\n| 719.0|    170800.0|\n|1054.0|    160000.0|\n| 685.0|    158000.0|\n| 707.0|    154000.0|\n| 760.0|    148000.0|\n|  19.0|    135714.0|\n|  20.0|    134614.0|\n|  23.0|    125814.0|\n| 116.0|    120000.0|\n|1081.0|    114937.0|\n|  69.0|    110150.0|\n|  14.0|     90000.0|\n|  10.0|     90000.0|\n|  11.0|     90000.0|\n|  12.0|     90000.0|\n+------+------------+\nonly showing top 20 rows\n\nuser_ratingSum: Unit = ()\n+------+------------+\n|userID|Rating_count|\n+------+------------+\n|   0.0|         454|\n|   1.0|         451|\n|   2.0|         359|\n|   3.0|         352|\n|   4.0|         293|\n|   5.0|         293|\n|   6.0|         203|\n|   9.0|         194|\n|   8.0|         194|\n|   7.0|         194|\n|  10.0|         180|\n|  13.0|         180|\n|  14.0|         180|\n|  11.0|         180|\n|  12.0|         180|\n|  15.0|         163|\n|  17.0|         159|\n|  16.0|         159|\n|  18.0|         148|\n|  19.0|         141|\n+------+------------+\nonly showing top 20 rows\n\nuser_ratingCount: Unit = ()\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=298","http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=299"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1545184439561_-1184456760","id":"20181212-020233_1752433362","dateCreated":"2018-12-19T01:53:59+0000","dateStarted":"2018-12-19T06:45:36+0000","dateFinished":"2018-12-19T06:46:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:93679"},{"text":"/*\r\n\r\n// NOTE: add minimum and maximum values to thresholds\r\nval thresholds: Array[Double] = Array(Double.MinValue, 0.0) ++ (((0.0 until 600000 by 100000).toArray ++ Array(Double.MaxValue)).map(_.toDouble))\r\n\r\n// Convert DataFrame to RDD and calculate histogram values\r\nval _tmpHist = top_sale.\r\n    select($\"Total_Amount\" cast \"double\").\r\n    rdd.map(r => r.getDouble(0)).\r\n    histogram(thresholds)\r\n\r\n// Result DataFrame contains `from`, `to` range and the `value`.\r\nval histogram = sc.parallelize((thresholds, thresholds.tail, _tmpHist).zipped.toList).toDF(\"from\", \"to\", \"value\")","user":"anonymous","dateUpdated":"2018-12-19T01:53:59+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"thresholds: Array[Double] = Array(-1.7976931348623157E308, 0.0, 0.0, 100000.0, 200000.0, 300000.0, 400000.0, 500000.0, 1.7976931348623157E308)\n_tmpHist: Array[Long] = Array(0, 0, 24168, 31, 8, 0, 1, 1)\nhistogram: org.apache.spark.sql.DataFrame = [from: double, to: double ... 1 more field]\n"}]},"apps":[],"jobName":"paragraph_1545184439562_1995253462","id":"20181214-093158_1815709665","dateCreated":"2018-12-19T01:53:59+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:93680"},{"text":"val unique_product = table.dropDuplicates(\"productID\") //留下唯一productID  (A)\nval unique_user = table.dropDuplicates(\"userID\") //留下唯一userID\nval join = unique_user.union(unique_product) //兩個資料表append\nval unique_product_user = join.dropDuplicates() //重複record drop掉 -> 作為train set\n\nval test_notyet = table.except(unique_product_user) // 待分的testset\nval Array(training, test) = test_notyet.randomSplit(Array[Double](0.9, 0.1))\nval train_final = unique_product_user.union(training)\nval test_final = test\n/*\nval numUsers = unique_product_user.select(training_final.col(\"userID\")).distinct().count() //確認數據有相同數量unique user\nval numProducts = unique_product_user.select(training_final.col(\"productID\")).distinct().count() //確認數據有相同數量unique product\n//numUsers: Long = 33984\n//numProducts: Long = 24209","user":"anonymous","dateUpdated":"2018-12-19T08:28:43+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"INCOMPLETE","msg":[{"type":"TEXT","data":"unique_product: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [userID: int, productID: int ... 1 more field]\nunique_user: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [userID: int, productID: int ... 1 more field]\njoin: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [userID: int, productID: int ... 1 more field]\nunique_product_user: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [userID: int, productID: int ... 1 more field]\ntest_notyet: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [userID: int, productID: int ... 1 more field]\ntraining: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [userID: int, productID: int ... 1 more field]\ntest: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [userID: int, productID: int ... 1 more field]\ntrain_final: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [userID: int, productID: int ... 1 more field]\ntest_final: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [userID: int, productID: int ... 1 more field]\n"}]},"apps":[],"jobName":"paragraph_1545184439562_523675533","id":"20181213-021529_782513074","dateCreated":"2018-12-19T01:53:59+0000","dateStarted":"2018-12-19T08:28:43+0000","dateFinished":"2018-12-19T08:28:48+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:93681"},{"text":"//確認數據集數量、且包含unique userID & productID.\n\nval numTrain = train_final.count()\nval numTest = test_final.count()\n\n// train: 131169\n// test: 8948","user":"anonymous","dateUpdated":"2018-12-19T02:26:45+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"numTrain: Long = 131169\nnumTest: Long = 8948\n"}]},"apps":[],"jobName":"paragraph_1545184439563_-1999239314","id":"20181213-030530_760267561","dateCreated":"2018-12-19T01:53:59+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:93682"},{"text":"// val training = train.union(unique_product_tr.toDF())\nval tableRDD = table.rdd.map(r => Rating(\n  r.getAs[Int](\"userID\"), r.getAs[Int](\"productID\"), r.getAs[Double](\"rating\")\n))\n\nval trainRDD = train_final.rdd.map(r => Rating(\n  r.getAs[Int](\"userID\"), r.getAs[Int](\"productID\"), r.getAs[Double](\"rating\")\n))\n\n/*\nval testRDD = testing.rdd.map(r => Rating(\n  r.getAs[Int](\"userID\"), r.getAs[Int](\"productID\"), r.getAs[Double](\"rating\")\n))\n","user":"anonymous","dateUpdated":"2018-12-19T08:28:56+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"INCOMPLETE","msg":[{"type":"TEXT","data":"tableRDD: org.apache.spark.rdd.RDD[org.apache.spark.mllib.recommendation.Rating] = MapPartitionsRDD[2572] at map at <console>:96\ntrainRDD: org.apache.spark.rdd.RDD[org.apache.spark.mllib.recommendation.Rating] = MapPartitionsRDD[2617] at map at <console>:107\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=375"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1545184439563_860461842","id":"20181212-043339_2062055690","dateCreated":"2018-12-19T01:53:59+0000","dateStarted":"2018-12-19T08:28:56+0000","dateFinished":"2018-12-19T08:30:43+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:93683"},{"text":"val itemFactors = model.productFeatures.map { case (id, factor) => factor }.collect()\r\nval itemMatrix = new DoubleMatrix(itemFactors)\r\nprintln(itemMatrix.rows, itemMatrix.columns)\r\n","user":"anonymous","dateUpdated":"2018-12-19T06:04:44+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"itemFactors: Array[Array[Double]] = Array(Array(-0.022480379790067673, 0.1784268468618393, 0.17447787523269653, -6.280233501456678E-4, 0.08534085005521774, 0.2711152136325836, -0.07274523377418518, -0.14749804139137268, 0.303722083568573, 0.6676160097122192, -0.34006398916244507, -0.11629851907491684, -0.0996616929769516, 0.49001243710517883, -0.5443194508552551, -0.09426553547382355, -0.31959253549575806, -0.14831629395484924, 0.217830091714859, 0.14050577580928802), Array(0.29909253120422363, -0.053987111896276474, -1.1015384197235107, -0.7607216835021973, -0.18308255076408386, 0.46070197224617004, 0.20827418565750122, -0.2866987884044647, 0.4385022521018982, 0.4376837909221649, -0.5626271367073059, -0.11250831931829453, -0.11177904903888702, 0.7313165664672852, -0.6647238731384277, -...itemMatrix: org.jblas.DoubleMatrix = [-0.022480379790067673, 0.1784268468618393, 0.17447787523269653, -6.280233501456678E-4, 0.08534085005521774, 0.2711152136325836, -0.07274523377418518, -0.14749804139137268, 0.303722083568573, 0.6676160097122192, -0.34006398916244507, -0.11629851907491684, -0.0996616929769516, 0.49001243710517883, -0.5443194508552551, -0.09426553547382355, -0.31959253549575806, -0.14831629395484924, 0.217830091714859, 0.14050577580928802; 0.29909253120422363, -0.053987111896276474, -1.1015384197235107, -0.7607216835021973, -0.18308255076408386, 0.46070197224617004, 0.20827418565750122, -0.2866987884044647, 0.4385022521018982, 0.4376837909221649, -0.5626271367073059, -0.11250831931829453, -0.11177904903888702, 0.7313165664672852, -0.6647238731384277, -0.058483850210905...(24209,20)\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=281"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1545196389678_-2109361727","id":"20181219-051309_886141161","dateCreated":"2018-12-19T05:13:09+0000","dateStarted":"2018-12-19T06:04:44+0000","dateFinished":"2018-12-19T06:08:50+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:93684"},{"text":"val imBroadcast = sc.broadcast(itemMatrix)\r\nval allRecs = model.userFeatures.map{ case (userId, array) =>\r\n  val userVector = new DoubleMatrix(array)\r\n  val scores = imBroadcast.value.mmul(userVector)\r\n  val sortedWithId = scores.data.zipWithIndex.sortBy(-_._1)\r\n  val recommendedIds = sortedWithId.map(_._2 + 1).toSeq\r\n  (userId, recommendedIds)\r\n}\r\nval userMovies = tableRDD.map{ case Rating(user, product, rating) => (user, product) }.groupBy(_._1)\r\nval K = 10\r\nval MAPK = allRecs.join(userMovies).map{ case (userId, (predicted, actualWithIds)) =>\r\n  val actual = actualWithIds.map(_._2).toSeq\r\n  avgPrecisionK(actual, predicted, K)\r\n}.reduce(_ + _) / allRecs.count\r\nprintln(\"Mean Average Precision at K = \" + MAPK)","user":"anonymous","dateUpdated":"2018-12-19T06:18:38+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"imBroadcast: org.apache.spark.broadcast.Broadcast[org.jblas.DoubleMatrix] = Broadcast(573)\nallRecs: org.apache.spark.rdd.RDD[(Int, Seq[Int])] = MapPartitionsRDD[1935] at map at <console>:127\nuserMovies: org.apache.spark.rdd.RDD[(Int, Iterable[(Int, Int)])] = ShuffledRDD[1938] at groupBy at <console>:96\nK: Int = 10\nMAPK: Double = 2.7346364312534665E-4\nMean Average Precision at K = 2.7346364312534665E-4\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=289","http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=290"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1545196539089_1589268182","id":"20181219-051539_636094125","dateCreated":"2018-12-19T05:15:39+0000","dateStarted":"2018-12-19T06:18:39+0000","dateFinished":"2018-12-19T06:27:32+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:93685"},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1545203322399_-83892851","id":"20181219-070842_1461630479","dateCreated":"2018-12-19T07:08:42+0000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:96902","text":"allRecs.take(5)","dateUpdated":"2018-12-19T07:09:35+0000"},{"text":"//val top_sale =  train_final.groupBy(\"productID\").agg(sum(\"rating\").alias(\"Total_Amount\")).sort($\"Total_Amount\".desc).drop(\"Total_Amount\")\n    //val topSale_List = top_sale.select(\"productID\").collect().map(_(0)).toList\n\ndef topSale_MAPK(TopSale: List[Any], ratings: RDD[Rating]) = {\n    \n    \n    val itemListPerUser = ratings.map{ case Rating(user,product,rating) => (user,product) }.groupBy(_._1)\n    val K = 10\n    val MAPK = allRecs.join(itemListPerUser).map{ case (userId, (predicted, actualWithIds)) =>\n    val actual = actualWithIds.map(_._2).toSeq\n      avgPrecisionK(actual, TopSale, K)\n    }.reduce(_ + _) / allRecs.count\n    println(\"Mean Average Precision at K = \" + MAPK)\n  }\n  \ntopSale_MAPK(topSale_List,tableRDD)","user":"anonymous","dateUpdated":"2018-12-19T06:58:45+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"topSale_MAPK: (TopSale: List[Any], ratings: org.apache.spark.rdd.RDD[org.apache.spark.mllib.recommendation.Rating])Unit\nMean Average Precision at K = 2.7346364312534665E-4\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=295","http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=296"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1545200922025_1283569812","id":"20181219-062842_544737595","dateCreated":"2018-12-19T06:28:42+0000","dateStarted":"2018-12-19T06:34:39+0000","dateFinished":"2018-12-19T06:40:54+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:93686"},{"text":"// percentile ranking function\r\ndef expectedPercentileRanking(model: MatrixFactorizationModel, ratings: RDD[Rating]) = {\r\n    val itemFactors = model.productFeatures.collect() //itemFactors: Array[(Int, Array[Double])]\r\n    val itemMatrix = new DoubleMatrix(itemFactors.map(_._2)) //[Double]\r\n    val imBroadCast = sc.broadcast(itemMatrix)\r\n    val itemListPerUser = ratings.groupBy(_.user).map {\r\n      case (user, ratingList) => (user, ratingList.map(rt => (rt.product, rt.rating)).toArray)\r\n    }\r\n    // itemListPerUser: [(Int, Array[(Int, Double)])]\r\n    val rankRDD = model.userFeatures.join(itemListPerUser).map {\r\n        //(Int,     (Array[Double], Array[(Int, Double)]))\r\n      case (userId, (userFeatures, itemRatingList)) =>\r\n        val userVector = new DoubleMatrix(userFeatures)\r\n        val scores = imBroadCast.value.mmul(userVector) //用戶對各產品喜好分數乘積\r\n        \r\n        val sortedWithId = scores.data.zipWithIndex.sortBy(-_._1) //A. User 產品偏好分數由大到小排列\r\n        val itemsOrderedByPref = sortedWithId.map(_._2 + 1).toSeq // B. 抓取User喜好順序的對應產品ID ex. User0 : [P4,P3,P1]\r\n        \r\n        val rankWeightedByRating = itemRatingList.map {\r\n          case (itemId, rating) =>\r\n            rating *itemsOrderedByPref.indexOf(itemId).toDouble / (itemsOrderedByPref.size - 1)\r\n        \r\n        }.sum\r\n        rankWeightedByRating\r\n    }\r\n    \r\n    //rankRDD.take(3).foreach(println)\r\n    val weightedRankOverAll = rankRDD.sum()\r\n    val sumWeight = ratings.map(_.rating).sum()\r\n    weightedRankOverAll / sumWeight\r\n    \r\n  }","user":"anonymous","dateUpdated":"2018-12-19T05:00:33+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"expectedPercentileRanking: (model: org.apache.spark.mllib.recommendation.MatrixFactorizationModel, ratings: org.apache.spark.rdd.RDD[org.apache.spark.mllib.recommendation.Rating])Double\n"}]},"apps":[],"jobName":"paragraph_1545184439564_574364344","id":"20181213-060048_1845127949","dateCreated":"2018-12-19T01:53:59+0000","dateStarted":"2018-12-19T04:40:16+0000","dateFinished":"2018-12-19T04:40:17+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:93687"},{"text":"val ranks = 20\nval lambdas = 0.03\nval alphas = 40\nval numIters = 8\nval model = ALS.trainImplicit(trainRDD, ranks, numIters, lambdas, alphas)","user":"anonymous","dateUpdated":"2018-12-19T06:03:33+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ranks: Int = 20\nlambdas: Double = 0.03\nalphas: Int = 40\nnumIters: Int = 8\nmodel: org.apache.spark.mllib.recommendation.MatrixFactorizationModel = org.apache.spark.mllib.recommendation.MatrixFactorizationModel@614497b\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=257","http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=258","http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=259","http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=260","http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=261","http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=262","http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=263","http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=264","http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=265","http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=266","http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=267","http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=268","http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=269","http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=270","http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=271","http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=272","http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=273","http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=274","http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=275","http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=276","http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=277","http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=278","http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=279","http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=280"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1545190646540_1524516729","id":"20181219-033726_507973762","dateCreated":"2018-12-19T03:37:26+0000","dateStarted":"2018-12-19T06:03:33+0000","dateFinished":"2018-12-19T06:08:36+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:93688"},{"text":"//APK evaluation\ndef avgPrecisionK(actual:Seq[Int],predicted:Seq[Int],k:Int):Double = {\n    val predK = predicted.take(k)\n    var score = 0.0\n    var numHits = 0.0\n    for((p,i) <- predK.zipWithIndex){\n        if(actual.contains(p)){\n            numHits += 1.0\n            score += numHits / (i.toDouble + 1.0)\n        }\n    }\n    if (actual.isEmpty)\n    {\n        1.0\n    }else{\n        score / scala.math.min(actual.size,k).toDouble\n    }\n}","user":"anonymous","dateUpdated":"2018-12-19T03:43:43+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"avgPrecisionK: (actual: Seq[Int], predicted: Seq[Int], k: Int)Double\n"}]},"apps":[],"jobName":"paragraph_1545190842752_-199959210","id":"20181219-034042_151034145","dateCreated":"2018-12-19T03:40:42+0000","dateStarted":"2018-12-19T03:43:43+0000","dateFinished":"2018-12-19T03:43:43+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:93689"},{"text":"val topKRecs = model.recommendProducts(0,20)\n//println(topKRecs.mkString(\"n\"))\nval moviesForUser = tableRDD.keyBy(_.user).lookup(0)\nmoviesForUser.sortBy(-_.rating).take(10).map(rating => (rating.product,rating.rating)).foreach(println)\nprintln(moviesForUser.size)\nval actualMovies = moviesForUser.map(_.product)\nval predictedMovies = topKRecs.map(_.product)\nval apk10 = avgPrecisionK(actualMovies,predictedMovies,10)","user":"anonymous","dateUpdated":"2018-12-19T06:46:52+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"topKRecs: Array[org.apache.spark.mllib.recommendation.Rating] = Array(Rating(0,91,2.4483932205064294), Rating(0,235,2.3009436840538027), Rating(0,103,2.0268802067235967), Rating(0,314,2.004060925232726), Rating(0,149,1.952062820616698), Rating(0,293,1.9230260119835407), Rating(0,696,1.8851711845585106), Rating(0,182,1.8369960042990383), Rating(0,186,1.782584139857394), Rating(0,249,1.7513008278911093), Rating(0,373,1.7150670199807168), Rating(0,779,1.712776960421919), Rating(0,845,1.7049024623391913), Rating(0,105,1.6792873021324692), Rating(0,350,1.6507836569774355), Rating(0,176,1.643542632546772), Rating(0,472,1.6077737905523897), Rating(0,34,1.6046135293565564), Rating(0,457,1.5659645306717804), Rating(0,678,1.5571292923525426))\nmoviesForUser: Seq[org.apache.spark.mllib.recommendation.Rating] = WrappedArray(Rating(0,2395,1.0), Rating(0,9318,1.0), Rating(0,6980,1.0), Rating(0,1468,1.0), Rating(0,4921,1.0), Rating(0,2271,1.0), Rating(0,4754,1.0), Rating(0,8692,1.0), Rating(0,8073,1.0), Rating(0,5451,1.0), Rating(0,8193,1.0), Rating(0,11221,1.0), Rating(0,11499,1.0), Rating(0,2873,1.0), Rating(0,11430,1.0), Rating(0,9045,1.0), Rating(0,6667,1.0), Rating(0,5798,1.0), Rating(0,11572,1.0), Rating(0,2980,1.0), Rating(0,6372,1.0), Rating(0,12116,1.0), Rating(0,1440,1.0), Rating(0,431,1.0), Rating(0,160,1.0), Rating(0,7508,1.0), Rating(0,2092,1.0), Rating(0,6419,1.0), Rating(0,6038,1.0), Rating(0,1372,1.0), Rating(0,901,1.0), Rating(0,5347,1.0), Rating(0,730,1.0), Rating(0,9185,1.0), Rating(0,11167,1.0), Rating(0,6478,1...(2395,1.0)\n(9318,1.0)\n(6980,1.0)\n(1468,1.0)\n(4921,1.0)\n(2271,1.0)\n(4754,1.0)\n(8692,1.0)\n(8073,1.0)\n(5451,1.0)\n454\nactualMovies: Seq[Int] = ArrayBuffer(2395, 9318, 6980, 1468, 4921, 2271, 4754, 8692, 8073, 5451, 8193, 11221, 11499, 2873, 11430, 9045, 6667, 5798, 11572, 2980, 6372, 12116, 1440, 431, 160, 7508, 2092, 6419, 6038, 1372, 901, 5347, 730, 9185, 11167, 6478, 1007, 8411, 852, 7276, 1929, 1086, 261, 11141, 11700, 3372, 8759, 2341, 6643, 804, 262, 7032, 581, 2231, 11790, 9964, 1296, 6076, 2466, 9648, 12205, 1113, 767, 1039, 5872, 11081, 11134, 2938, 4985, 7963, 7969, 11376, 3068, 6963, 11217, 10014, 9182, 2529, 7215, 11300, 6786, 1859, 10690, 11559, 8919, 555, 950, 2874, 8347, 698, 11889, 320, 697, 4376, 5559, 8741, 10370, 12234, 5742, 8072, 830, 8661, 4588, 1681, 7310, 1587, 586, 537, 990, 4384, 701, 6391, 7094, 1373, 12000, 737, 1633, 4255, 1803, 3177, 2785, 11849, 3061, 5284, 3911, 1115, 81...predictedMovies: Array[Int] = Array(91, 235, 103, 314, 149, 293, 696, 182, 186, 249, 373, 779, 845, 105, 350, 176, 472, 34, 457, 678)\napk10: Double = 0.0\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=300","http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=301","http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=302"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1545191147497_788925124","id":"20181219-034547_1755199287","dateCreated":"2018-12-19T03:45:47+0000","dateStarted":"2018-12-19T06:46:52+0000","dateFinished":"2018-12-19T06:47:34+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:93690"},{"text":"val topKRecs = model.recommendProducts(3,20)\n//println(topKRecs.mkString(\"n\"))\nval moviesForUser = tableRDD.keyBy(_.user).lookup(3)\nmoviesForUser.sortBy(-_.rating).take(10).map(rating => (rating.product,rating.rating)).foreach(println)\nprintln(moviesForUser.size)\nval actualMovies = moviesForUser.map(_.product)\nval predictedMovies = topKRecs.map(_.product)\nval apk10 = avgPrecisionK(actualMovies,predictedMovies,10)","user":"anonymous","dateUpdated":"2018-12-19T06:48:47+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"topKRecs: Array[org.apache.spark.mllib.recommendation.Rating] = Array(Rating(3,210,2.225183473588835), Rating(3,240,2.132103559131349), Rating(3,229,1.8556399048685157), Rating(3,841,1.8257145953367573), Rating(3,311,1.8207838997787062), Rating(3,335,1.7723315352849394), Rating(3,252,1.7379040572357705), Rating(3,559,1.6052733537849742), Rating(3,403,1.5652471347576702), Rating(3,736,1.5610055665888343), Rating(3,1690,1.542180370773718), Rating(3,40,1.537729955476248), Rating(3,326,1.5325092728069147), Rating(3,640,1.4991647320110983), Rating(3,110,1.480931801261487), Rating(3,280,1.4770577809067402), Rating(3,325,1.4729399788217843), Rating(3,497,1.4128479640850786), Rating(3,371,1.3949593341700293), Rating(3,425,1.3800385889422908))\nmoviesForUser: Seq[org.apache.spark.mllib.recommendation.Rating] = WrappedArray(Rating(3,89,1500.0), Rating(3,237,1500.0), Rating(3,1593,1500.0), Rating(3,10989,1500.0), Rating(3,15,1500.0), Rating(3,5936,1500.0), Rating(3,345,1500.0), Rating(3,6224,1500.0), Rating(3,3235,1500.0), Rating(3,1,1500.0), Rating(3,795,1500.0), Rating(3,1787,1500.0), Rating(3,9588,1500.0), Rating(3,2159,1500.0), Rating(3,471,1500.0), Rating(3,997,1500.0), Rating(3,646,1500.0), Rating(3,557,1500.0), Rating(3,6684,1500.0), Rating(3,7766,1500.0), Rating(3,344,1500.0), Rating(3,215,1500.0), Rating(3,43,1500.0), Rating(3,1016,1500.0), Rating(3,18,1500.0), Rating(3,7229,1500.0), Rating(3,749,1500.0), Rating(3,208,1500.0), Rating(3,2036,1500.0), Rating(3,11532,1500.0), Rating(3,1820,1500.0), Rating(3,3096,1500.0), R...(556,3000.0)\n(381,3000.0)\n(106,3000.0)\n(9081,3000.0)\n(9933,3000.0)\n(1123,3000.0)\n(89,1500.0)\n(237,1500.0)\n(1593,1500.0)\n(10989,1500.0)\n352\nactualMovies: Seq[Int] = ArrayBuffer(89, 237, 1593, 10989, 15, 5936, 345, 6224, 3235, 1, 795, 1787, 9588, 2159, 471, 997, 646, 557, 6684, 7766, 344, 215, 43, 1016, 18, 7229, 749, 208, 2036, 11532, 1820, 3096, 327, 860, 1497, 3649, 3656, 305, 117, 1169, 2830, 122, 1380, 136, 556, 12265, 53, 1335, 9279, 1027, 607, 10198, 114, 407, 7421, 1348, 10340, 1577, 49, 314, 33, 10505, 77, 809, 7159, 10809, 1627, 202, 3460, 11663, 8669, 690, 161, 107, 1122, 189, 235, 8329, 196, 1843, 10714, 12215, 1489, 3900, 11312, 2099, 10, 7712, 3140, 411, 5, 7542, 6359, 1419, 8646, 9729, 912, 6936, 337, 2100, 10787, 801, 126, 247, 11875, 1011, 8059, 56, 1521, 478, 7492, 11455, 9866, 481, 1178, 2439, 156, 10280, 1904, 9355, 918, 9696, 765, 4339, 42, 3928, 3139, 679, 1545, 10431, 405, 2679, 391, 7204, 2328, 119, 8...predictedMovies: Array[Int] = Array(210, 240, 229, 841, 311, 335, 252, 559, 403, 736, 1690, 40, 326, 640, 110, 280, 325, 497, 371, 425)\napk10: Double = 0.0\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=309","http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=310","http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=311"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1545202026059_-1120768951","id":"20181219-064706_873260514","dateCreated":"2018-12-19T06:47:06+0000","dateStarted":"2018-12-19T06:48:47+0000","dateFinished":"2018-12-19T06:48:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:93691"},{"text":"val topKRecs = model.recommendProducts(54,20)\n//println(topKRecs.mkString(\"n\"))\nval moviesForUser = tableRDD.keyBy(_.user).lookup(54)\nmoviesForUser.sortBy(-_.rating).take(10).map(rating => (rating.product,rating.rating)).foreach(println)\nprintln(moviesForUser.size)\nval actualMovies = moviesForUser.map(_.product)\nval predictedMovies = topKRecs.map(_.product)\nval apk10 = avgPrecisionK(actualMovies,predictedMovies,10)","user":"anonymous","dateUpdated":"2018-12-19T06:48:57+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"topKRecs: Array[org.apache.spark.mllib.recommendation.Rating] = Array(Rating(54,578,2.4653736239811774), Rating(54,257,2.0527331354145675), Rating(54,427,2.0023826290642006), Rating(54,1077,1.7953195798879866), Rating(54,1021,1.7216812839819071), Rating(54,536,1.7083709110791925), Rating(54,542,1.5437948433250328), Rating(54,1041,1.5408842097089641), Rating(54,599,1.5407169929149016), Rating(54,792,1.4852496102010568), Rating(54,94,1.4700175616502638), Rating(54,211,1.4422673673167496), Rating(54,303,1.4354510216660248), Rating(54,1356,1.4198177546450232), Rating(54,177,1.3169533435982024), Rating(54,131,1.2649196728564829), Rating(54,519,1.254332995303939), Rating(54,1666,1.2357499481251006), Rating(54,1136,1.2292844366742541), Rating(54,219,1.218788739899833))\nmoviesForUser: Seq[org.apache.spark.mllib.recommendation.Rating] = WrappedArray(Rating(54,7426,4000.0), Rating(54,7158,4000.0), Rating(54,5133,4000.0), Rating(54,6457,4000.0), Rating(54,5211,4000.0), Rating(54,7386,2000.0), Rating(54,5758,4000.0), Rating(54,5060,4000.0), Rating(54,6927,2000.0), Rating(54,5026,4000.0), Rating(54,5837,4000.0), Rating(54,7157,4000.0), Rating(54,5891,4000.0), Rating(54,6811,4000.0), Rating(54,7352,4000.0), Rating(54,7275,4000.0), Rating(54,5483,4000.0), Rating(54,6019,4000.0), Rating(54,5838,4000.0), Rating(54,5134,4000.0), Rating(54,7249,4000.0), Rating(54,6360,4000.0), Rating(54,5001,4000.0), Rating(54,7338,4000.0), Rating(54,5582,4000.0), Rating(54,7039,4000.0), Rating(54,7189,4000.0), Rating(54,6440,4000.0), Rating(54,4928,4000.0), Rating(54,7016,4000.0...(7426,4000.0)\n(7158,4000.0)\n(5133,4000.0)\n(6457,4000.0)\n(5211,4000.0)\n(5758,4000.0)\n(5060,4000.0)\n(5026,4000.0)\n(5837,4000.0)\n(7157,4000.0)\n93\nactualMovies: Seq[Int] = ArrayBuffer(7426, 7158, 5133, 6457, 5211, 7386, 5758, 5060, 6927, 5026, 5837, 7157, 5891, 6811, 7352, 7275, 5483, 6019, 5838, 5134, 7249, 6360, 5001, 7338, 5582, 7039, 7189, 6440, 4928, 7016, 6109, 6361, 4913, 6061, 7154, 6332, 5885, 6722, 6741, 6368, 7317, 5778, 5213, 5973, 5166, 7442, 5361, 6892, 4025, 6056, 6872, 7262, 7067, 7497, 5947, 5509, 5470, 5260, 6804, 6764, 4844, 6103, 6671, 6665, 6486, 5481, 7280, 5017, 5395, 3454, 5847, 7491, 5717, 5525, 4995, 3573, 6196, 5325, 5286, 5146, 7387, 4924, 6485, 7164, 5254, 5551, 6871, 6913, 7469, 5765, 5210, 4557, 5469)\npredictedMovies: Array[Int] = Array(578, 257, 427, 1077, 1021, 536, 542, 1041, 599, 792, 94, 211, 303, 1356, 177, 131, 519, 1666, 1136, 219)\napk10: Double = 0.0\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=312","http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=313","http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=314"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1545202035898_1806890337","id":"20181219-064715_1461106215","dateCreated":"2018-12-19T06:47:15+0000","dateStarted":"2018-12-19T06:48:57+0000","dateFinished":"2018-12-19T06:49:12+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:93692"},{"text":"val actualMovies = moviesForUser.map(_.product)\nval predictedMovies = topKRecs.map(_.product)\nval apk10 = avgPrecisionK(actualMovies,predictedMovies,10)","user":"anonymous","dateUpdated":"2018-12-19T06:12:02+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"actualMovies: Seq[Int] = ArrayBuffer(89, 237, 1593, 15, 10989, 5936, 345, 6224, 3235, 1, 795, 9588, 1787, 2159, 471, 997, 557, 6684, 646, 344, 7766, 215, 43, 1016, 18, 7229, 749, 208, 2036, 11532, 1820, 3096, 860, 327, 3649, 3656, 1497, 305, 117, 1169, 122, 2830, 1380, 12265, 53, 136, 556, 1335, 9279, 1027, 607, 7421, 1348, 10198, 114, 407, 10340, 49, 1577, 314, 33, 10505, 77, 809, 10809, 7159, 1627, 3460, 202, 11663, 8669, 690, 161, 107, 1122, 8329, 196, 189, 235, 12215, 1489, 1843, 10714, 3900, 11312, 2099, 10, 3140, 411, 7712, 5, 7542, 6359, 1419, 8646, 9729, 912, 6936, 10787, 337, 2100, 801, 126, 56, 8059, 247, 11875, 1011, 1521, 478, 7492, 9866, 11455, 481, 1178, 2439, 156, 10280, 918, 1904, 9355, 9696, 765, 42, 4339, 3928, 3139, 1545, 10431, 679, 405, 7204, 2328, 119, 2679, 391, 8...predictedMovies: Array[Int] = Array(210, 240, 229, 841, 311, 335, 252, 559, 403, 736, 1690, 40, 326, 640, 110, 280, 325, 497, 371, 425)\napk10: Double = 0.0\n"}]},"apps":[],"jobName":"paragraph_1545191969656_-1790497444","id":"20181219-035929_1426219492","dateCreated":"2018-12-19T03:59:29+0000","dateStarted":"2018-12-19T06:12:03+0000","dateFinished":"2018-12-19T06:12:12+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:93693"},{"text":"model.predict(54,7158)\nmodel.predict(54,578)\n","user":"anonymous","dateUpdated":"2018-12-19T06:50:30+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res243: Double = 1.0004947954811425\nres244: Double = 2.4653736239811774\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=315","http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=316","http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=317","http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=318"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1545197335614_1445921792","id":"20181219-052855_1142291200","dateCreated":"2018-12-19T05:28:55+0000","dateStarted":"2018-12-19T06:50:30+0000","dateFinished":"2018-12-19T06:50:36+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:93694"},{"text":"// Corss Validation Model\n    val ranks = Array(8,12)\n    val lambdas = Array(0.01)\n    val alphas = Array(40,0.01)\n    val numIters = Array(4)\n    var bestModel: Option[MatrixFactorizationModel] = None\n    var bestRanking = 99.0\n    var bestRank = 0\n    var bestLambda = -1.0\n    var bestNumIter = -1\n    var bestAlpha = 0\n    \n   for (rank <- ranks; lambda <- lambdas; numIter <- numIters; alpha <- alphas ) {\n      val model = ALS.trainImplicit(trainRDD, rank, numIter, lambda, alpha)\n      val rank_in = expectedPercentileRanking(model, tableRDD)\n      println(\"Percentil Ranking = \" + rank_in + \" for the model trained with rank = \"\n        + rank + \n        \", lambda = \" + lambda + \n        \", alpha = \" + alpha + \n        \", and numIter = \" + numIter + \".\")\n      if (rank_in < bestRanking) {\n        bestModel = Some(model)\n        bestRanking = rank_in\n        bestRank = rank\n        bestLambda = lambda\n        bestNumIter = numIter\n        bestAlpha = alpha\n      }\n    }\n\n    val test_PercentileRanking = rank_in\n\n    println(\"The best model was trained with ranking = \" + bestRanking + \" and rank = \" + bestRank + \" and lambda = \" + bestLambda\n      + \", and numIter = \" + bestNumIter + \", and its RMSE on the test set is \" + test_PercentileRanking + \".\")","user":"anonymous","dateUpdated":"2018-12-19T04:56:16+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"ranks: Array[Int] = Array(8, 12)\nlambdas: Array[Double] = Array(0.01)\nalphas: Array[Double] = Array(40.0, 0.01)\nnumIters: Array[Int] = Array(4)\nbestModel: Option[org.apache.spark.mllib.recommendation.MatrixFactorizationModel] = None\nbestRanking: Double = 99.0\nbestRank: Int = 0\nbestLambda: Double = -1.0\nbestNumIter: Int = -1\nbestAlpha: Int = 0\n<console>:142: error: value foreach is not a member of Int\n          for (rank <- ranks; lambda <- lambdas; numIter <- numIters; alpha <- alphas ) {\n                       ^\n<console>:142: error: value foreach is not a member of Double\n          for (rank <- ranks; lambda <- lambdas; numIter <- numIters; alpha <- alphas ) {\n                                        ^\n<console>:142: error: value foreach is not a member of Int\n          for (rank <- ranks; lambda <- lambdas; numIter <- numIters; alpha <- alphas ) {\n                                                            ^\n<console>:142: error: value foreach is not a member of Int\n          for (rank <- ranks; lambda <- lambdas; numIter <- numIters; alpha <- alphas ) {\n                                                                               ^\n"}]},"apps":[],"jobName":"paragraph_1545184439564_-1895060327","id":"20181213-032739_1279375246","dateCreated":"2018-12-19T01:53:59+0000","dateStarted":"2018-12-19T04:56:16+0000","dateFinished":"2018-12-19T04:56:17+0000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:93695"},{"text":"val top_sale =  train_final.groupBy(\"productID\").agg(sum(\"rating\").alias(\"Total_Amount\")).sort($\"Total_Amount\".desc)\ntop_sale.show()","user":"anonymous","dateUpdated":"2018-12-19T03:04:57+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"top_sale: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [productID: int, Total_Amount: double]\n+---------+------------+\n|productID|Total_Amount|\n+---------+------------+\n|        0|    506672.0|\n|        1|    440786.0|\n|        5|    271957.0|\n|        4|    238703.0|\n|        3|    238078.0|\n|      153|    236762.0|\n|        8|    233375.0|\n|       18|    199732.0|\n|        2|    191746.0|\n|       11|    181382.0|\n|       12|    176191.0|\n|        7|    163771.0|\n|       29|    158711.0|\n|       10|    154892.0|\n|       26|    150779.0|\n|       43|    149943.0|\n|      104|    146431.0|\n|       92|    137457.0|\n|       25|    134459.0|\n|       20|    133825.0|\n+---------+------------+\nonly showing top 20 rows\n\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=36","http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=37"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1545188600265_1815680899","id":"20181219-030320_917660532","dateCreated":"2018-12-19T03:03:20+0000","dateStarted":"2018-12-19T03:04:57+0000","dateFinished":"2018-12-19T03:06:28+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:93696"},{"text":"//model_decimal\nval rank = 8\nval numIterations = 5\nval block = -1\nval seed = 1222L\nval implicitPrefs = true\nval model_decimal = new ALS().\nsetIterations(numIterations).\nsetBlocks(block).\nsetRank(rank).\nsetSeed(seed).\nsetImplicitPrefs(implicitPrefs).\nrun(trainRDD)\n","user":"anonymous","dateUpdated":"2018-12-19T01:53:59+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"rank: Int = 8\nnumIterations: Int = 5\nblock: Int = -1\nseed: Long = 1222\nimplicitPrefs: Boolean = true\nmodel_decimal: org.apache.spark.mllib.recommendation.MatrixFactorizationModel = org.apache.spark.mllib.recommendation.MatrixFactorizationModel@638cf04b\n"}]},"apps":[],"jobName":"paragraph_1545184439566_-2127807066","id":"20181218-033804_465452853","dateCreated":"2018-12-19T01:53:59+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:93697"},{"text":"//model_default.userFeatures.take(3)\nmodel_decimal.userFeatures.take(3)","user":"anonymous","dateUpdated":"2018-12-19T01:53:59+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{"0":{"graph":{"mode":"table","height":88,"optionOpen":false}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res222: Array[(Int, Array[Double])] = Array((0,Array(-0.07924874871969223, 0.07974139600992203, -0.08342031389474869, 0.8544738292694092, -0.5965257883071899, 0.16072046756744385, 0.5971316695213318, -0.6120902895927429, 0.16028696298599243, 0.40369266271591187, 0.5457688570022583, 0.3736405670642853, -1.0139213800430298, 0.6656785607337952, -0.21745538711547852, -0.6604974865913391, -0.9868693351745605, -0.5820733904838562, 1.2085545063018799, 0.40022745728492737, 0.5475912690162659, 0.3341904282569885, -0.09709439426660538, -0.2976132035255432, -0.7061969637870789, 0.9840803146362305, 0.7194858193397522, 0.5465829968452454, -0.5055050849914551, 0.21154338121414185)), (200,Array(-0.2697714865207672, -0.40370842814445496, -0.026851624250411987, 0.4122345745563507, 0.23954634368419647, -..."}]},"apps":[],"jobName":"paragraph_1545184439566_561744583","id":"20181218-030117_1582787129","dateCreated":"2018-12-19T01:53:59+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:93698"},{"text":"// \n// 1. top sale ranking.\n// 2. percentile ranking of testset item.\n\n//val top_sale =  training_final.groupBy(\"productID\").agg(sum(\"rating\").alias(\"Total_Amount\")).sort($\"Total_Amount\".desc).drop(\"Total_Amount\")\n//val topSale_List = top_sale.select(\"productID\").collect().map(_(0)).toList\n\ndef topSalePercentileRanking(TopSale: Seq[Any], ratings: RDD[Rating]) = {\n    \n    //val List =  whole.groupBy(\"productID\").agg(sum(\"rating\").alias(\"Total_Amount\")).sort($\"Total_Amount\".desc).drop(\"Total_Amount\")\n    //val topSale_List = top_sale.select(\"productID\").collect().map(_(0)).toList\n    \n    val itemListPerUser = ratings.groupBy(_.user).map {\n      case (user, ratingList) => (user, ratingList.map(rt => (rt.product, rt.rating)).toArray)\n    }\n    val rankRDD_top = itemListPerUser.map {\n      case (userId, itemRatingList) =>\n\n        \n        val rankWeightedByRating = itemRatingList.map {\n          case (itemId, rating) =>\n             rating * TopSale.indexOf(itemId).toDouble / (TopSale.size - 1)\n        \n        }.sum\n        rankWeightedByRating\n    }\n    //rankRDD_top.take(3).foreach(println)\n    val weightedRankOverAll = rankRDD_top.sum()\n    val sumWeight = ratings.map(_.rating).sum()\n    weightedRankOverAll / sumWeight\n  }\n\n\n\n","user":"anonymous","dateUpdated":"2018-12-19T07:55:01+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"topSalePercentileRanking: (TopSale: Seq[Any], ratings: org.apache.spark.rdd.RDD[org.apache.spark.mllib.recommendation.Rating])Double\n"}]},"apps":[],"jobName":"paragraph_1545184439567_-966898799","id":"20181214-073100_1799197759","dateCreated":"2018-12-19T01:53:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:93699","dateFinished":"2018-12-19T07:55:02+0000","dateStarted":"2018-12-19T07:55:01+0000"},{"text":" //topSalePercentileRanking(topSale_List,trainRDD)\n  topSalePercentileRanking(topSale_List,tableRDD)\n  ","user":"anonymous","dateUpdated":"2018-12-19T01:53:59+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res104: Double = 0.13167605004876726\n"}]},"apps":[],"jobName":"paragraph_1545184439567_369999736","id":"20181214-085829_1387069036","dateCreated":"2018-12-19T01:53:59+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:93700"},{"text":"\r\n//val rank_in = expectedPercentileRanking(model_default, trainRDD)\r\nval rank_out = expectedPercentileRanking(model, tableRDD)\r\n","user":"anonymous","dateUpdated":"2018-12-19T04:40:24+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"rank_out: Double = 0.47117034579830297\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=142","http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=143","http://ip-172-31-37-61.ec2.internal:4040/jobs/job?id=144"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1545184439568_-341277544","id":"20181212-070031_1706859906","dateCreated":"2018-12-19T01:53:59+0000","dateStarted":"2018-12-19T04:40:24+0000","dateFinished":"2018-12-19T04:44:29+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:93701"},{"user":"anonymous","dateUpdated":"2018-12-19T01:53:59+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1545184439568_-929427841","id":"20181218-063203_647348150","dateCreated":"2018-12-19T01:53:59+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:93702"},{"text":"val predictedRating = model_decimal.predict(991,718)\nprintln(predictedRating)","user":"anonymous","dateUpdated":"2018-12-19T01:53:59+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"predictedRating: Double = -0.055086200180631484\n-0.055086200180631484\n"}]},"apps":[],"jobName":"paragraph_1545184439569_1017271776","id":"20181214-091517_840293925","dateCreated":"2018-12-19T01:53:59+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:93703"},{"user":"anonymous","dateUpdated":"2018-12-19T01:53:59+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1545184439569_801039401","id":"20181218-063027_1844992397","dateCreated":"2018-12-19T01:53:59+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:93704"}],"name":"MAP_MLlib_ALS","id":"2DYPE5HM9","noteParams":{},"noteForms":{},"angularObjects":{"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}